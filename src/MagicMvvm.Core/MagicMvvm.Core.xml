<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MagicMvvm.Core</name>
    </assembly>
    <members>
        <member name="T:MagicMvvm.Commands.DelegateCommand">
            <summary>
            An <see cref="T:System.Windows.Input.ICommand"/> whose delegates do not take any parameters for <see cref="M:MagicMvvm.Commands.DelegateCommand.Execute"/> and <see cref="M:MagicMvvm.Commands.DelegateCommand.CanExecute"/>.
            </summary>
            <see cref="T:MagicMvvm.Commands.DelegateCommandBase"/>
            <see cref="T:MagicMvvm.Commands.DelegateCommand`1"/>
        </member>
        <member name="M:MagicMvvm.Commands.DelegateCommand.#ctor(System.Action)">
            <summary>
            Creates a new instance of <see cref="T:MagicMvvm.Commands.DelegateCommand"/> with the <see cref="T:System.Action"/> to invoke on execution.
            </summary>
            <param name="executeMethod">The <see cref="T:System.Action"/> to invoke when <see cref="M:System.Windows.Input.ICommand.Execute(System.Object)"/> is called.</param>
        </member>
        <member name="M:MagicMvvm.Commands.DelegateCommand.#ctor(System.Action,System.Func{System.Boolean})">
            <summary>
            Creates a new instance of <see cref="T:MagicMvvm.Commands.DelegateCommand"/> with the <see cref="T:System.Action"/> to invoke on execution
            and a <see langword="Func" /> to query for determining if the command can execute.
            </summary>
            <param name="executeMethod">The <see cref="T:System.Action"/> to invoke when <see cref="M:System.Windows.Input.ICommand.Execute(System.Object)"/> is called.</param>
            <param name="canExecuteMethod">The <see cref="T:System.Func`1"/> to invoke when <see cref="M:System.Windows.Input.ICommand.CanExecute(System.Object)"/> is called</param>
        </member>
        <member name="M:MagicMvvm.Commands.DelegateCommand.Execute">
            <summary>
             Executes the command.
            </summary>
        </member>
        <member name="M:MagicMvvm.Commands.DelegateCommand.CanExecute">
            <summary>
            Determines if the command can be executed.
            </summary>
            <returns>Returns <see langword="true"/> if the command can execute,otherwise returns <see langword="false"/>.</returns>
        </member>
        <member name="M:MagicMvvm.Commands.DelegateCommand.Execute(System.Object)">
            <summary>
            Handle the internal invocation of <see cref="M:System.Windows.Input.ICommand.Execute(System.Object)"/>
            </summary>
            <param name="parameter">Command Parameter</param>
        </member>
        <member name="M:MagicMvvm.Commands.DelegateCommand.CanExecute(System.Object)">
            <summary>
            Handle the internal invocation of <see cref="M:System.Windows.Input.ICommand.CanExecute(System.Object)"/>
            </summary>
            <param name="parameter"></param>
            <returns><see langword="true"/> if the Command Can Execute, otherwise <see langword="false" /></returns>
        </member>
        <member name="M:MagicMvvm.Commands.DelegateCommand.ObservesProperty``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Observes a property that implements INotifyPropertyChanged, and automatically calls DelegateCommandBase.RaiseCanExecuteChanged on property changed notifications.
            </summary>
            <typeparam name="T">The object type containing the property specified in the expression.</typeparam>
            <param name="propertyExpression">The property expression. Example: ObservesProperty(() => PropertyName).</param>
            <returns>The current instance of DelegateCommand</returns>
        </member>
        <member name="M:MagicMvvm.Commands.DelegateCommand.ObservesCanExecute(System.Linq.Expressions.Expression{System.Func{System.Boolean}})">
            <summary>
            Observes a property that is used to determine if this command can execute, and if it implements INotifyPropertyChanged it will automatically call DelegateCommandBase.RaiseCanExecuteChanged on property changed notifications.
            </summary>
            <param name="canExecuteExpression">The property expression. Example: ObservesCanExecute(() => PropertyName).</param>
            <returns>The current instance of DelegateCommand</returns>
        </member>
        <member name="T:MagicMvvm.Commands.DelegateCommandBase">
            <summary>
            An <see cref="T:System.Windows.Input.ICommand"/> whose delegates can be attached for <see cref="M:MagicMvvm.Commands.DelegateCommandBase.Execute(System.Object)"/> and <see cref="M:MagicMvvm.Commands.DelegateCommandBase.CanExecute(System.Object)"/>.
            </summary>
        </member>
        <member name="M:MagicMvvm.Commands.DelegateCommandBase.#ctor">
            <summary>
            Creates a new instance of a <see cref="T:MagicMvvm.Commands.DelegateCommandBase"/>, specifying both the execute action and the can execute function.
            </summary>
        </member>
        <member name="E:MagicMvvm.Commands.DelegateCommandBase.CanExecuteChanged">
            <summary>
            Occurs when changes occur that affect whether or not the command should execute.
            </summary>
        </member>
        <member name="M:MagicMvvm.Commands.DelegateCommandBase.OnCanExecuteChanged">
            <summary>
            Raises <see cref="E:System.Windows.Input.ICommand.CanExecuteChanged"/> so every
            command invoker can requery <see cref="M:System.Windows.Input.ICommand.CanExecute(System.Object)"/>.
            </summary>
        </member>
        <member name="M:MagicMvvm.Commands.DelegateCommandBase.RaiseCanExecuteChanged">
            <summary>
            Raises <see cref="E:MagicMvvm.Commands.DelegateCommandBase.CanExecuteChanged"/> so every command invoker
            can requery to check if the command can execute.
            </summary>
            <remarks>Note that this will trigger the execution of <see cref="E:MagicMvvm.Commands.DelegateCommandBase.CanExecuteChanged"/> once for each invoker.</remarks>
        </member>
        <member name="M:MagicMvvm.Commands.DelegateCommandBase.Execute(System.Object)">
            <summary>
            Handle the internal invocation of <see cref="M:System.Windows.Input.ICommand.Execute(System.Object)"/>
            </summary>
            <param name="parameter">Command Parameter</param>
        </member>
        <member name="M:MagicMvvm.Commands.DelegateCommandBase.CanExecute(System.Object)">
            <summary>
            Handle the internal invocation of <see cref="M:System.Windows.Input.ICommand.CanExecute(System.Object)"/>
            </summary>
            <param name="parameter"></param>
            <returns><see langword="true"/> if the Command Can Execute, otherwise <see langword="false" /></returns>
        </member>
        <member name="M:MagicMvvm.Commands.DelegateCommandBase.ObservesPropertyInternal``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Observes a property that implements INotifyPropertyChanged, and automatically calls DelegateCommandBase.RaiseCanExecuteChanged on property changed notifications.
            </summary>
            <typeparam name="T">The object type containing the property specified in the expression.</typeparam>
            <param name="propertyExpression">The property expression. Example: ObservesProperty(() => PropertyName).</param>
        </member>
        <member name="P:MagicMvvm.Commands.DelegateCommandBase.IsActive">
            <summary>
            Gets or sets a value indicating whether the object is active.
            </summary>
            <value><see langword="true" /> if the object is active; otherwise <see langword="false" />.</value>
        </member>
        <member name="E:MagicMvvm.Commands.DelegateCommandBase.IsActiveChanged">
            <summary>
            Fired if the <see cref="P:MagicMvvm.Commands.DelegateCommandBase.IsActive"/> property changes.
            </summary>
        </member>
        <member name="M:MagicMvvm.Commands.DelegateCommandBase.OnIsActiveChanged">
            <summary>
            This raises the <see cref="E:MagicMvvm.Commands.DelegateCommandBase.IsActiveChanged"/> event.
            </summary>
        </member>
        <member name="T:MagicMvvm.Commands.DelegateCommand`1">
             <summary>
             An <see cref="T:System.Windows.Input.ICommand"/> whose delegates can be attached for <see cref="M:MagicMvvm.Commands.DelegateCommand`1.Execute(`0)"/> and <see cref="M:MagicMvvm.Commands.DelegateCommand`1.CanExecute(`0)"/>.
             </summary>
             <typeparam name="T">Parameter type.</typeparam>
             <remarks>
             The constructor deliberately prevents the use of value types.
             Because ICommand takes an object, having a value type for T would cause unexpected behavior when CanExecute(null) is called during XAML initialization for command bindings.
             Using default(T) was considered and rejected as a solution because the implementor would not be able to distinguish between a valid and defaulted values.
             <para/>
             Instead, callers should support a value type by using a nullable value type and checking the HasValue property before using the Value property.
             <example>
                 <code>
             public MyClass()
             {
                 this.submitCommand = new DelegateCommand&lt;int?&gt;(this.Submit, this.CanSubmit);
             }
            
             private bool CanSubmit(int? customerId)
             {
                 return (customerId.HasValue &amp;&amp; customers.Contains(customerId.Value));
             }
                 </code>
             </example>
             </remarks>
        </member>
        <member name="M:MagicMvvm.Commands.DelegateCommand`1.#ctor(System.Action{`0})">
            <summary>
            Initializes a new instance of <see cref="T:MagicMvvm.Commands.DelegateCommand`1"/>.
            </summary>
            <param name="executeMethod">Delegate to execute when Execute is called on the command. This can be null to just hook up a CanExecute delegate.</param>
            <remarks><see cref="M:MagicMvvm.Commands.DelegateCommand`1.CanExecute(`0)"/> will always return true.</remarks>
        </member>
        <member name="M:MagicMvvm.Commands.DelegateCommand`1.#ctor(System.Action{`0},System.Func{`0,System.Boolean})">
            <summary>
            Initializes a new instance of <see cref="T:MagicMvvm.Commands.DelegateCommand`1"/>.
            </summary>
            <param name="executeMethod">Delegate to execute when Execute is called on the command. This can be null to just hook up a CanExecute delegate.</param>
            <param name="canExecuteMethod">Delegate to execute when CanExecute is called on the command. This can be null.</param>
            <exception cref="T:System.ArgumentNullException">When both <paramref name="executeMethod"/> and <paramref name="canExecuteMethod"/> are <see langword="null" />.</exception>
        </member>
        <member name="M:MagicMvvm.Commands.DelegateCommand`1.Execute(`0)">
            <summary>
            Executes the command and invokes the <see cref="T:System.Action`1"/> provided during construction.
            </summary>
            <param name="parameter">Data used by the command.</param>
        </member>
        <member name="M:MagicMvvm.Commands.DelegateCommand`1.CanExecute(`0)">
            <summary>
            Determines if the command can execute by invoked the <see cref="T:System.Func`2"/> provided during construction.
            </summary>
            <param name="parameter">Data used by the command to determine if it can execute.</param>
            <returns>
            <see langword="true" /> if this command can be executed; otherwise, <see langword="false" />.
            </returns>
        </member>
        <member name="M:MagicMvvm.Commands.DelegateCommand`1.Execute(System.Object)">
            <summary>
            Handle the internal invocation of <see cref="M:System.Windows.Input.ICommand.Execute(System.Object)"/>
            </summary>
            <param name="parameter">Command Parameter</param>
        </member>
        <member name="M:MagicMvvm.Commands.DelegateCommand`1.CanExecute(System.Object)">
            <summary>
            Handle the internal invocation of <see cref="M:System.Windows.Input.ICommand.CanExecute(System.Object)"/>
            </summary>
            <param name="parameter"></param>
            <returns><see langword="true"/> if the Command Can Execute, otherwise <see langword="false" /></returns>
        </member>
        <member name="M:MagicMvvm.Commands.DelegateCommand`1.ObservesProperty``1(System.Linq.Expressions.Expression{System.Func{``0}})">
            <summary>
            Observes a property that implements INotifyPropertyChanged, and automatically calls DelegateCommandBase.RaiseCanExecuteChanged on property changed notifications.
            </summary>
            <typeparam name="TType">The type of the return value of the method that this delegate encapsulates</typeparam>
            <param name="propertyExpression">The property expression. Example: ObservesProperty(() => PropertyName).</param>
            <returns>The current instance of DelegateCommand</returns>
        </member>
        <member name="M:MagicMvvm.Commands.DelegateCommand`1.ObservesCanExecute(System.Linq.Expressions.Expression{System.Func{System.Boolean}})">
            <summary>
            Observes a property that is used to determine if this command can execute, and if it implements INotifyPropertyChanged it will automatically call DelegateCommandBase.RaiseCanExecuteChanged on property changed notifications.
            </summary>
            <param name="canExecuteExpression">The property expression. Example: ObservesCanExecute(() => PropertyName).</param>
            <returns>The current instance of DelegateCommand</returns>
        </member>
        <member name="T:MagicMvvm.Commands.PropertyObserver">
            <summary>
            Provide a way to observe property changes of INotifyPropertyChanged objects and invokes a
            custom action when the PropertyChanged event is fired.
            </summary>
        </member>
        <member name="M:MagicMvvm.Commands.PropertyObserver.Observes``1(System.Linq.Expressions.Expression{System.Func{``0}},System.Action)">
            <summary>
            Observes a property that implements INotifyPropertyChanged, and automatically calls a custom action on
            property changed notifications. The given expression must be in this form: "() => Prop.NestedProp.PropToObserve".
            </summary>
            <param name="propertyExpression">Expression representing property to be observed. Ex.: "() => Prop.NestedProp.PropToObserve".</param>
            <param name="action">Action to be invoked when PropertyChanged event occurs.</param>
        </member>
        <member name="T:MagicMvvm.Commands.PropertyObserverNode">
            <summary>
            Represents each node of nested properties expression and takes care of
            subscribing/unsubscribing INotifyPropertyChanged.PropertyChanged listeners on it.
            </summary>
        </member>
        <member name="T:MagicMvvm.Common.IParameters">
            <summary>
            Defines a contract for specifying values associated with a unique key.
            </summary>
        </member>
        <member name="M:MagicMvvm.Common.IParameters.Add(System.String,System.Object)">
            <summary>
            Adds the specified key and value to the parameter collection.
            </summary>
            <param name="key">The key of the parameter to add.</param>
            <param name="value">The value of the parameter to add.</param>
        </member>
        <member name="M:MagicMvvm.Common.IParameters.ContainsKey(System.String)">
            <summary>
            Determines whether the <see cref="T:MagicMvvm.Common.IParameters"/> contains the specified <paramref name="key"/>.
            </summary>
            <param name="key">The key to search the parameters for existence.</param>
            <returns>true if the <see cref="T:MagicMvvm.Common.IParameters"/> contains a parameter with the specified key; otherwise, false.</returns>
        </member>
        <member name="P:MagicMvvm.Common.IParameters.Count">
            <summary>
            Gets the number of parameters contained in the <see cref="T:MagicMvvm.Common.IParameters"/>.
            </summary>
        </member>
        <member name="P:MagicMvvm.Common.IParameters.Keys">
            <summary>
            Gets a collection containing the keys in the <see cref="T:MagicMvvm.Common.IParameters"/>.
            </summary>
        </member>
        <member name="M:MagicMvvm.Common.IParameters.GetValue``1(System.String)">
            <summary>
            Gets the parameter associated with the specified <paramref name="key"/>.
            </summary>
            <typeparam name="T">The type of the parameter to get.</typeparam>
            <param name="key">The key of the parameter to find.</param>
            <returns>A matching value of <typeparamref name="T"/> if it exists.</returns>
        </member>
        <member name="M:MagicMvvm.Common.IParameters.GetValues``1(System.String)">
            <summary>
            Gets the parameter associated with the specified <paramref name="key"/>.
            </summary>
            <typeparam name="T">The type of the parameter to get.</typeparam>
            <param name="key">The key of the parameter to find.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of all the values referenced by key.</returns>
        </member>
        <member name="M:MagicMvvm.Common.IParameters.TryGetValue``1(System.String,``0@)">
            <summary>
            Gets the parameter associated with the specified <paramref name="key"/>.
            </summary>
            <typeparam name="T">The type of the parameter to get.</typeparam>
            <param name="key">The key of the parameter to get.</param>
            <param name="value">
            When this method returns, contains the parameter associated with the specified key,
            if the key is found; otherwise, the default value for the type of the value parameter.
            </param>
            <returns>true if the <see cref="T:MagicMvvm.Common.IParameters"/> contains a parameter with the specified key; otherwise, false.</returns>
        </member>
        <member name="P:MagicMvvm.Common.IParameters.Item(System.String)">
            <summary>
            Gets the parameter associated with the specified key (legacy).
            </summary>
            <param name="key">The key of the parameter to get.</param>
            <returns>A matching value if it exists.</returns>
        </member>
        <member name="T:MagicMvvm.Common.ParametersBase">
            <summary>
            This is a generic parameters base class used for Dialog Parameters and Navigation Parameters.
            </summary>
        </member>
        <member name="M:MagicMvvm.Common.ParametersBase.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:MagicMvvm.Common.ParametersBase.#ctor(System.String)">
            <summary>
            Constructs a list of parameters.
            </summary>
            <param name="query">Query string to be parsed.</param>
        </member>
        <member name="P:MagicMvvm.Common.ParametersBase.Item(System.String)">
            <summary>
            Searches Parameter collection and returns value if Collection contains key.
            Otherwise returns null.
            </summary>
            <param name="key">The key for the value to be returned.</param>
            <returns>The value of the parameter referenced by the key; otherwise <c>null</c>.</returns>
        </member>
        <member name="P:MagicMvvm.Common.ParametersBase.Count">
            <summary>
            The count, or number, of parameters in collection.
            </summary>
        </member>
        <member name="P:MagicMvvm.Common.ParametersBase.Keys">
            <summary>
            Returns an IEnumerable of the Keys in the collection.
            </summary>
        </member>
        <member name="M:MagicMvvm.Common.ParametersBase.Add(System.String,System.Object)">
            <summary>
            Adds the key and value to the parameters collection.
            </summary>
            <param name="key">The key to reference this value in the parameters collection.</param>
            <param name="value">The value of the parameter to store.</param>
        </member>
        <member name="M:MagicMvvm.Common.ParametersBase.ContainsKey(System.String)">
            <summary>
            Checks collection for presence of key.
            </summary>
            <param name="key">The key to check in the collection.</param>
            <returns><c>true</c> if key exists; else returns <c>false</c>.</returns>
        </member>
        <member name="M:MagicMvvm.Common.ParametersBase.GetEnumerator">
            <summary>
            Gets an enumerator for the KeyValuePairs in parameter collection.
            </summary>
            <returns>Enumerator.</returns>
        </member>
        <member name="M:MagicMvvm.Common.ParametersBase.GetValue``1(System.String)">
            <summary>
            Returns the value of the member referenced by key.
            </summary>
            <typeparam name="T">The type of object to be returned.</typeparam>
            <param name="key">The key for the value to be returned.</param>
            <returns>Returns a matching parameter of <typeparamref name="T"/> if one exists in the Collection.</returns>
        </member>
        <member name="M:MagicMvvm.Common.ParametersBase.GetValues``1(System.String)">
             <summary>
             Returns an IEnumerable of all parameters.
             </summary>
             <typeparam name="T">The type for the values to be returned.</typeparam>
             <param name="key">The key for the values to be returned.</param>
            <returns>Returns a IEnumerable of all the instances of type <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:MagicMvvm.Common.ParametersBase.TryGetValue``1(System.String,``0@)">
            <summary>
            Checks to see if the parameter collection contains the value.
            </summary>
            <typeparam name="T">The type for the values to be returned.</typeparam>
            <param name="key">The key for the value to be returned.</param>
            <param name="value">Value of the returned parameter if it exists.</param>
        </member>
        <member name="M:MagicMvvm.Common.ParametersBase.ToString">
            <summary>
            Converts parameter collection to a parameter string.
            </summary>
            <returns>A string representation of the parameters.</returns>
        </member>
        <member name="M:MagicMvvm.Common.ParametersBase.FromParameters(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Adds a collection of parameters to the local parameter list.
            </summary>
            <param name="parameters">An IEnumerable of KeyValuePairs to add to the current parameter list.</param>
        </member>
        <member name="T:MagicMvvm.Common.ParametersExtensions">
            <summary>
            Extension methods for Navigation or Dialog parameters
            </summary>
        </member>
        <member name="M:MagicMvvm.Common.ParametersExtensions.GetValue``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.String)">
            <summary>
            Searches <paramref name="parameters"/> for <paramref name="key"/>
            </summary>
            <typeparam name="T">The type of the parameter to return</typeparam>
            <param name="parameters">A collection of parameters to search</param>
            <param name="key">The key of the parameter to find</param>
            <returns>A matching value of <typeparamref name="T"/> if it exists</returns>
        </member>
        <member name="M:MagicMvvm.Common.ParametersExtensions.GetValue(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.String,System.Type)">
            <summary>
            Searches <paramref name="parameters"/> for value referenced by <paramref name="key"/>
            </summary>
            <param name="parameters">A collection of parameters to search</param>
            <param name="key">The key of the parameter to find</param>
            <param name="type">The type of the parameter to return</param>
            <returns>A matching value of <paramref name="type"/> if it exists</returns>
            <exception cref="T:System.InvalidCastException">Unable to convert the value of Type</exception>
        </member>
        <member name="M:MagicMvvm.Common.ParametersExtensions.TryGetValue``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.String,``0@)">
            <summary>
            Searches <paramref name="parameters"/> for value referenced by <paramref name="key"/>
            </summary>
            <typeparam name="T">The type of the parameter to return</typeparam>
            <param name="parameters">A collection of parameters to search</param>
            <param name="key">The key of the parameter to find</param>
            <param name="value">The value of parameter to return</param>
            <returns>Success if value is found; otherwise returns <c>false</c></returns>
        </member>
        <member name="M:MagicMvvm.Common.ParametersExtensions.GetValues``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.String)">
            <summary>
            Searches <paramref name="parameters"/> for value referenced by <paramref name="key"/>
            </summary>
            <typeparam name="T">The type of the parameter to return</typeparam>
            <param name="parameters">A collection of parameters to search</param>
            <param name="key">The key of the parameter to find</param>
            <returns>An IEnumerable{T} of all the values referenced by key</returns>
        </member>
        <member name="M:MagicMvvm.Common.ParametersExtensions.ContainsKey(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.String)">
            <summary>
            Checks to see if key exists in parameter collection
            </summary>
            <param name="parameters">IEnumerable to search</param>
            <param name="key">The key to search the <paramref name="parameters"/> for existence</param>
            <returns><c>true</c> if key exists; <c>false</c> otherwise</returns>
        </member>
        <member name="T:MagicMvvm.Dialogs.ButtonResult">
            <summary>
            The result of the dialog.
            </summary>
        </member>
        <member name="F:MagicMvvm.Dialogs.ButtonResult.Abort">
            <summary>
            Abort.
            </summary>
        </member>
        <member name="F:MagicMvvm.Dialogs.ButtonResult.Cancel">
            <summary>
            Cancel.
            </summary>
        </member>
        <member name="F:MagicMvvm.Dialogs.ButtonResult.Ignore">
            <summary>
            Ignore.
            </summary>
        </member>
        <member name="F:MagicMvvm.Dialogs.ButtonResult.No">
            <summary>
            No.
            </summary>
        </member>
        <member name="F:MagicMvvm.Dialogs.ButtonResult.None">
            <summary>
            No result returned.
            </summary>
        </member>
        <member name="F:MagicMvvm.Dialogs.ButtonResult.OK">
            <summary>
            OK.
            </summary>
        </member>
        <member name="F:MagicMvvm.Dialogs.ButtonResult.Retry">
            <summary>
            Retry.
            </summary>
        </member>
        <member name="F:MagicMvvm.Dialogs.ButtonResult.Yes">
            <summary>
            Yes.
            </summary>
        </member>
        <member name="T:MagicMvvm.Dialogs.DialogParameters">
            <summary>
            Represents Dialog parameters.
            </summary>
            <remarks>
            This class can be used to to pass object parameters during the showing and closing of Dialogs.
            </remarks>
        </member>
        <member name="M:MagicMvvm.Dialogs.DialogParameters.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MagicMvvm.Dialogs.DialogParameters"/> class.
            </summary>
        </member>
        <member name="M:MagicMvvm.Dialogs.DialogParameters.#ctor(System.String)">
            <summary>
            Constructs a list of parameters.
            </summary>
            <param name="query">Query string to be parsed.</param>
        </member>
        <member name="T:MagicMvvm.Dialogs.DialogResult">
            <summary>
            An <see cref="T:MagicMvvm.Dialogs.IDialogResult"/> that contains <see cref="T:MagicMvvm.Dialogs.IDialogParameters"/> from the dialog
            and the <see cref="T:MagicMvvm.Dialogs.ButtonResult"/> of the dialog.
            </summary>
        </member>
        <member name="P:MagicMvvm.Dialogs.DialogResult.Parameters">
            <summary>
            The parameters from the dialog.
            </summary>
        </member>
        <member name="P:MagicMvvm.Dialogs.DialogResult.Result">
            <summary>
            The result of the dialog.
            </summary>
        </member>
        <member name="M:MagicMvvm.Dialogs.DialogResult.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MagicMvvm.Dialogs.DialogResult"/> class.
            </summary>
        </member>
        <member name="M:MagicMvvm.Dialogs.DialogResult.#ctor(MagicMvvm.Dialogs.ButtonResult)">
            <summary>
            Initializes a new instance of the <see cref="T:MagicMvvm.Dialogs.DialogResult"/> class.
            </summary>
            <param name="result">The result of the dialog.</param>
        </member>
        <member name="M:MagicMvvm.Dialogs.DialogResult.#ctor(MagicMvvm.Dialogs.ButtonResult,MagicMvvm.Dialogs.IDialogParameters)">
            <summary>
            Initializes a new instance of the <see cref="T:MagicMvvm.Dialogs.DialogResult"/> class.
            </summary>
            <param name="result">The result of the dialog.</param>
            <param name="parameters">The parameters from the dialog.</param>
        </member>
        <member name="T:MagicMvvm.Dialogs.IDialogAware">
            <summary>
            Interface that provides dialog functions and events to ViewModels.
            </summary>
        </member>
        <member name="P:MagicMvvm.Dialogs.IDialogAware.Title">
            <summary>
            The title of the dialog that will show in the hostWindow title bar.
            </summary>
        </member>
        <member name="E:MagicMvvm.Dialogs.IDialogAware.RequestClose">
            <summary>
            Instructs the IDialogHostWindow to close the dialog.
            </summary>
        </member>
        <member name="M:MagicMvvm.Dialogs.IDialogAware.CanCloseDialog">
            <summary>
            Determines if the dialog can be closed.
            </summary>
            <returns>If <c>true</c> the dialog can be closed. If <c>false</c> the dialog will not close.</returns>
        </member>
        <member name="M:MagicMvvm.Dialogs.IDialogAware.OnDialogClosed">
            <summary>
            Called when the dialog is closed.
            </summary>
        </member>
        <member name="M:MagicMvvm.Dialogs.IDialogAware.OnDialogOpened(MagicMvvm.Dialogs.IDialogParameters)">
            <summary>
            Called when the dialog is opened.
            </summary>
            <param name="parameters">The parameters passed to the dialog.</param>
        </member>
        <member name="T:MagicMvvm.Dialogs.IDialogManager">
            <summary>
            Interface to show modal or non-modal dialogs.
            </summary>
            <remarks>
            Register type as a singleton inside container.
            </remarks>
        </member>
        <member name="M:MagicMvvm.Dialogs.IDialogManager.RegisterDialog``1(System.String)">
            <summary>
            Register dialog inside registrar.
            </summary>
            <param name="dialogName">The unique name of the dialog.</param>
            <typeparam name="TDialogView">View of dialog which is inherited from FrameworkElement</typeparam>
            <exception cref="T:System.ArgumentNullException">Throws exception if <paramref name="dialogName"/> is null or empty</exception>
            <returns>The <see cref="T:MagicMvvm.Dialogs.IDialogManager"/>, for registering several dialogs easily.</returns>
        </member>
        <member name="M:MagicMvvm.Dialogs.IDialogManager.RegisterDialogHostWindow``1(System.String)">
            <summary>
            Register dialog host window inside registrar.
            </summary>
            <param name="windowName">The unique name of the dialog's hosting window.</param>
            <typeparam name="TDialogWindow">View of dialog's hosting window which is class that implements IDialogHostWindow</typeparam>
            <exception cref="T:System.ArgumentNullException">Throws exception if <paramref name="windowName"/> is null or empty</exception>
            <returns>The <see cref="T:MagicMvvm.Dialogs.IDialogManager"/>, for registering several host windows easily.</returns>
        </member>
        <member name="M:MagicMvvm.Dialogs.IDialogManager.Show(System.String,MagicMvvm.Dialogs.IDialogParameters,System.Action{MagicMvvm.Dialogs.IDialogResult},System.String)">
            <summary>
            Shows a non-modal dialog.
            </summary>
            <param name="dialogName">The unique name of the dialog to show.</param>
            <param name="parameters">The parameters to pass to the dialog.</param>
            <param name="callback">The action to perform when the dialog is closed.</param>
            <param name="windowName">The unique name of dialog's hosting window.</param>
            <exception cref="T:System.InvalidOperationException">Throws exception if <paramref name="dialogName"/> was not registered in internal registrar</exception>
        </member>
        <member name="M:MagicMvvm.Dialogs.IDialogManager.ShowDialog(System.String,MagicMvvm.Dialogs.IDialogParameters,System.Action{MagicMvvm.Dialogs.IDialogResult},System.String)">
            <summary>
            Shows a modal dialog.
            </summary>
            <param name="dialogName">The unique name of the dialog to show.</param>
            <param name="parameters">The parameters to pass to the dialog.</param>
            <param name="callback">The action to perform when the dialog is closed.</param>
            <param name="windowName">The unique name of dialog's hosting window.</param>
            <exception cref="T:System.InvalidOperationException">Throws exception if <paramref name="dialogName"/> was not registered in internal registrar</exception>
        </member>
        <member name="T:MagicMvvm.Dialogs.IDialogParameters">
            <summary>
            Represents Dialog parameters.
            </summary>
            <remarks>
            A class that implements this interface can be used to pass
            object parameters during the showing and closing of Dialogs.
            </remarks>
        </member>
        <member name="T:MagicMvvm.Dialogs.IDialogResult">
            <summary>
            Contains <see cref="T:MagicMvvm.Dialogs.IDialogParameters"/> from the dialog
            and the <see cref="T:MagicMvvm.Dialogs.ButtonResult"/> of the dialog.
            </summary>
        </member>
        <member name="P:MagicMvvm.Dialogs.IDialogResult.Parameters">
            <summary>
            The parameters from the dialog.
            </summary>
        </member>
        <member name="P:MagicMvvm.Dialogs.IDialogResult.Result">
            <summary>
            The result of the dialog.
            </summary>
        </member>
        <member name="T:MagicMvvm.IActiveAware">
            <summary>
            Interface that defines if the object instance is active
            and notifies when the activity changes.
            </summary>
        </member>
        <member name="P:MagicMvvm.IActiveAware.IsActive">
            <summary>
            Gets or sets a value indicating whether the object is active.
            </summary>
            <value><see langword="true" /> if the object is active; otherwise <see langword="false" />.</value>
        </member>
        <member name="E:MagicMvvm.IActiveAware.IsActiveChanged">
            <summary>
            Notifies that the value for <see cref="P:MagicMvvm.IActiveAware.IsActive"/> property has changed.
            </summary>
        </member>
        <member name="E:MagicMvvm.BindableBase.PropertyChanged">
            <summary>
            Occurs when a property value changes.
            </summary>
        </member>
        <member name="M:MagicMvvm.BindableBase.SetProperty``1(``0@,``0,System.String)">
            <summary>
            Checks if a property already matches a desired value. Sets the property and
            notifies listeners only when necessary.
            </summary>
            <typeparam name="T">Type of the property.</typeparam>
            <param name="storage">Reference to a property with both getter and setter.</param>
            <param name="value">Desired value for the property.</param>
            <param name="propertyName">Name of the property used to notify listeners. This
            value is optional and can be provided automatically when invoked from compilers that
            support CallerMemberName.</param>
            <returns>True if the value was changed, false if the existing value matched the
            desired value.</returns>
        </member>
        <member name="M:MagicMvvm.BindableBase.SetProperty``1(``0@,``0,System.Action,System.String)">
            <summary>
            Checks if a property already matches a desired value. Sets the property and
            notifies listeners only when necessary.
            </summary>
            <typeparam name="T">Type of the property.</typeparam>
            <param name="storage">Reference to a property with both getter and setter.</param>
            <param name="value">Desired value for the property.</param>
            <param name="propertyName">Name of the property used to notify listeners. This
            value is optional and can be provided automatically when invoked from compilers that
            support CallerMemberName.</param>
            <param name="onChanged">Action that is called after the property value has been changed.</param>
            <returns>True if the value was changed, false if the existing value matched the
            desired value.</returns>
        </member>
        <member name="M:MagicMvvm.BindableBase.RaisePropertyChanged(System.String)">
            <summary>
            Raises this object's PropertyChanged event.
            </summary>
            <param name="propertyName">Name of the property used to notify listeners. This
            value is optional and can be provided automatically when invoked from compilers
            that support <see cref="T:System.Runtime.CompilerServices.CallerMemberNameAttribute"/>.</param>
        </member>
        <member name="M:MagicMvvm.BindableBase.RaisePropertiesChanged(System.String[])">
            <summary>
            Raises all property's PropertyChanged event.
            </summary>
            <param name="propertiesNames">Name of properties</param>
        </member>
        <member name="M:MagicMvvm.BindableBase.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Raises this object's PropertyChanged event.
            </summary>
            <param name="args">The PropertyChangedEventArgs</param>
        </member>
        <member name="T:MagicMvvm.Navigation.INavigationAware">
            <summary>
            Provides a way for objects involved in navigation to be notified of navigation activities.
            </summary>
        </member>
        <member name="M:MagicMvvm.Navigation.INavigationAware.OnNavigatedTo(MagicMvvm.Navigation.NavigationContext)">
            <summary>
            Called when the implementer has been navigated to.
            </summary>
            <param name="navigationContext">The navigation context.</param>
        </member>
        <member name="M:MagicMvvm.Navigation.INavigationAware.OnNavigatedFrom(MagicMvvm.Navigation.NavigationContext)">
            <summary>
            Called when the implementer is being navigated away from.
            </summary>
            <param name="navigationContext">The navigation context.</param>
        </member>
        <member name="T:MagicMvvm.Navigation.INavigationManager">
            <summary>
            Interface of navigation manager.
            </summary>
            <remarks>
            Register type as a singleton inside container.
            </remarks>
        </member>
        <member name="M:MagicMvvm.Navigation.INavigationManager.RegisterRegionWithView(System.String,System.Object)">
            <summary>
            Register region name and region view's instance inside registrar. Associate a view with a region, using a concrete instance of the view.
            </summary>
            <param name="regionName">The name of the region to associate the view with.</param>
            <param name="viewInstance">The instance of the view which associated with region name.</param>
            <exception cref="T:System.ArgumentNullException">Throws exception if <paramref name="regionName"/> or <paramref name="viewInstance"/> is null or empty</exception>
            <returns>The <see cref="T:MagicMvvm.Navigation.INavigationManager"/>, for adding several views easily</returns>
        </member>
        <member name="M:MagicMvvm.Navigation.INavigationManager.RegisterView``1(System.String)">
            <summary>
            Register view name and view source inside registrar. Configures specified view for navigation.
            </summary>
            <param name="viewName">The unique view name</param>
            <typeparam name="TView">Type of the view</typeparam>
            <exception cref="T:System.ArgumentNullException">Throws exception if <paramref name="viewName"/> is null or empty</exception>
            <exception cref="T:System.InvalidOperationException">Throws exception if application does not have any resource files or could not locate to resource files</exception>
            <returns>The <see cref="T:MagicMvvm.Navigation.INavigationManager"/>, for adding several views easily</returns>
        </member>
        <member name="M:MagicMvvm.Navigation.INavigationManager.RequestNavigate(System.String,System.String,System.Action,MagicMvvm.Navigation.INavigationParameters)">
            <summary>
            Navigates the specified view to the region.
            </summary>
            <param name="regionName">The name of the region to call Navigate on.</param>
            <param name="viewName">The name of the view that registered for navigation inside manager.</param>
            <param name="navigationCallback">The navigation callback that will be executed after the navigation is completed.</param>
            <param name="navigationParameters">Navigation parameters to pass arguments between views.</param>
            <exception cref="T:System.InvalidOperationException">Throws exception if <paramref name="viewName"/> or <paramref name="regionName"/> was not registered in internal registrar</exception>
        </member>
        <member name="T:MagicMvvm.Navigation.INavigationParameters">
            <summary>
            Represents Navigation parameters.
            </summary>
            <remarks>
            This class can be used to to pass object parameters during Navigation.
            </remarks>
        </member>
        <member name="T:MagicMvvm.Navigation.NavigationContext">
            <summary>
            Encapsulates information about a navigation request.
            </summary>
        </member>
        <member name="M:MagicMvvm.Navigation.NavigationContext.#ctor(MagicMvvm.Navigation.INavigationParameters)">
            <summary>
            Initializes a new instance of the <see cref="T:MagicMvvm.Navigation.NavigationContext"/> class for a region name and a
            <see cref="T:System.Uri"/>.
            </summary>
            <param name="navigationParameters">The navigation parameters.</param>
        </member>
        <member name="P:MagicMvvm.Navigation.NavigationContext.Parameters">
            <summary>
            Gets the <see cref="T:MagicMvvm.Navigation.NavigationParameters"/> extracted from the URI and the object parameters passed in navigation.
            </summary>
            <value>The URI query.</value>
        </member>
        <member name="T:MagicMvvm.Navigation.NavigationParameters">
            <summary>
            Represents Navigation parameters.
            </summary>
            <remarks>
            This class can be used to to pass object parameters during Navigation.
            </remarks>
        </member>
        <member name="M:MagicMvvm.Navigation.NavigationParameters.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MagicMvvm.Navigation.NavigationParameters"/> class.
            </summary>
        </member>
        <member name="M:MagicMvvm.Navigation.NavigationParameters.#ctor(System.String)">
            <summary>
            Constructs a list of parameters
            </summary>
            <param name="query">Query string to be parsed</param>
        </member>
    </members>
</doc>
