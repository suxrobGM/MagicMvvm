<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MagicMvvm.Forms</name>
    </assembly>
    <members>
        <member name="T:MagicMvvm.Forms.AppModel.IKeyboardMapper">
            <summary>
            An abstraction to map <see cref="T:MagicMvvm.Forms.AppModel.KeyboardType"/> to the <see cref="T:Xamarin.Forms.Keyboard"/>;
            </summary>
        </member>
        <member name="M:MagicMvvm.Forms.AppModel.IKeyboardMapper.Map(MagicMvvm.Forms.AppModel.KeyboardType)">
            <summary>
            Maps the <see cref="T:MagicMvvm.Forms.AppModel.KeyboardType"/> to a <see cref="T:Xamarin.Forms.Keyboard"/>
            </summary>
            <param name="keyboardType">The Keyboard type.</param>
            <returns>The <see cref="T:Xamarin.Forms.Keyboard"/>.</returns>
        </member>
        <member name="T:MagicMvvm.Forms.AppModel.KeyboardMapper">
            <summary>
            The default implementation of the <see cref="T:MagicMvvm.Forms.AppModel.IKeyboardMapper"/>.
            </summary>
        </member>
        <member name="M:MagicMvvm.Forms.AppModel.KeyboardMapper.Map(MagicMvvm.Forms.AppModel.KeyboardType)">
            <summary>
            Maps the <see cref="T:MagicMvvm.Forms.AppModel.KeyboardType"/> to a <see cref="T:Xamarin.Forms.Keyboard"/>
            </summary>
            <param name="keyboardType">The Keyboard type.</param>
            <returns>The <see cref="T:Xamarin.Forms.Keyboard"/>.</returns>
        </member>
        <member name="T:MagicMvvm.Forms.AppModel.KeyboardType">
            <summary>
            Keyboard type
            </summary>
        </member>
        <member name="F:MagicMvvm.Forms.AppModel.KeyboardType.Chat">
            <summary>
            Gets an instance of type "ChatKeyboard".
            </summary>
        </member>
        <member name="F:MagicMvvm.Forms.AppModel.KeyboardType.Default">
            <summary>
            Gets an instance of type "Keyboard".
            </summary>
        </member>
        <member name="F:MagicMvvm.Forms.AppModel.KeyboardType.Email">
            <summary>
            Gets an instance of type "EmailKeyboard".
            </summary>
        </member>
        <member name="F:MagicMvvm.Forms.AppModel.KeyboardType.Numeric">
            <summary>
            Gets an instance of type "NumericKeyboard".
            </summary>
        </member>
        <member name="F:MagicMvvm.Forms.AppModel.KeyboardType.Plain">
            <summary>
            Returns a new keyboard with None Xamarin.Forms.KeyboardFlags.
            </summary>
        </member>
        <member name="F:MagicMvvm.Forms.AppModel.KeyboardType.Telephone">
            <summary>
            Gets an instance of type "TelephoneKeyboard".
            </summary>
        </member>
        <member name="F:MagicMvvm.Forms.AppModel.KeyboardType.Text">
            <summary>
            Gets an instance of type "TextKeyboard".
            </summary>
        </member>
        <member name="F:MagicMvvm.Forms.AppModel.KeyboardType.Url">
            <summary>
            Gets an instance of type "UrlKeyboard".
            </summary>
        </member>
        <member name="T:MagicMvvm.Forms.Common.ApplicationProvider">
            <summary>
            Provides Application components.
            </summary>
        </member>
        <member name="T:MagicMvvm.Forms.Common.IApplicationProvider">
            <summary>
            Defines a contract for providing Application components.
            </summary>
        </member>
        <member name="P:MagicMvvm.Forms.Common.IApplicationProvider.MainPage">
            <summary>
            Gets the main page of the Application.
            </summary>
        </member>
        <member name="P:MagicMvvm.Forms.Common.IApplicationProvider.CurrentShell">
            <summary>
            Gets current shell.
            </summary>
        </member>
        <member name="T:MagicMvvm.Forms.Dialogs.DialogManager">
            <summary>
            Provides the ability to display dialogs from ViewModels.
            </summary>
        </member>
        <member name="F:MagicMvvm.Forms.Dialogs.DialogManager.PopupOverlayStyle">
            <summary>
            Gets the key for specifying or retrieving popup overlay style from Application Resources.
            </summary>
        </member>
        <member name="M:MagicMvvm.Forms.Dialogs.DialogManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MagicMvvm.Forms.Dialogs.DialogManager"/> class.
            </summary>
        </member>
        <member name="T:MagicMvvm.Forms.Dialogs.IDialogManager">
            <summary>
            Interface to show dialogs.
            </summary>
            <remarks>
            Register type as a singleton inside container.
            </remarks>
        </member>
        <member name="M:MagicMvvm.Forms.Dialogs.IDialogManager.ShowDialog(System.String,MagicMvvm.Common.IParameters,System.Action{MagicMvvm.Forms.Dialogs.IDialogResult})">
            <summary>
            Displays a dialog.
            </summary>
            <param name="name">The unique name of the dialog to display.</param>
            <param name="parameters">Parameters that the dialog can use for custom functionality.</param>
            <param name="callback">The action to be invoked upon successful or failed completion of displaying the dialog.</param>
            <example>
            This example shows how to display a dialog with two parameters.
            <code>
            var parameters = new DialogParameters
            {
                { "title", "Connection Lost!" },
                { "message", "We seem to have lost network connectivity" }
            };
            _dialogManager.ShowDialog("DemoDialog", parameters, <paramref name="callback"/>: null);
            </code>
            </example>
        </member>
        <member name="M:MagicMvvm.Forms.Dialogs.IDialogManager.RegisterDialog``1(System.String)">
            <summary>
            Registers the dialog.
            </summary>
            <param name="dialogName">The unique name of the dialog.</param>
            <typeparam name="T">View of dialog which is inherited from View</typeparam>
            <exception cref="T:System.ArgumentNullException">Throws exception if <paramref name="dialogName"/> is null or empty</exception>
            <returns>The <see cref="T:MagicMvvm.Forms.Dialogs.IDialogManager"/>, for registering several dialogs easily.</returns>
        </member>
        <member name="T:MagicMvvm.Forms.Dialogs.KnownDialogParameters">
            <summary>
            Predefined dialog parameters
            </summary>
        </member>
        <member name="T:MagicMvvm.Forms.Dialogs.ActionSheetButton">
            <summary>
            Represents a button displayed in <see cref="M:MagicMvvm.Forms.Dialogs.IPopupDialog.DisplayActionSheetAsync(System.String,MagicMvvm.Forms.Dialogs.IActionSheetButton[])"/>
            </summary>
        </member>
        <member name="P:MagicMvvm.Forms.Dialogs.ActionSheetButton.Action">
            <summary>
            Action to perform when the button is pressed
            </summary>
            <value>The action.</value>
        </member>
        <member name="M:MagicMvvm.Forms.Dialogs.ActionSheetButton.OnButtonPressed">
            <summary>
            Executes the action to take when the button is pressed
            </summary>
        </member>
        <member name="M:MagicMvvm.Forms.Dialogs.ActionSheetButton.CreateCancelButton(System.String)">
            <summary>
            Create a new instance of <see cref="T:MagicMvvm.Forms.Dialogs.ActionSheetButton"/> that display as "cancel button"
            </summary>
            <param name="text">Button text</param>
            <returns>An instance of <see cref="T:MagicMvvm.Forms.Dialogs.ActionSheetButton"/></returns>
        </member>
        <member name="M:MagicMvvm.Forms.Dialogs.ActionSheetButton.CreateCancelButton(System.String,System.Action)">
            <summary>
            Create a new instance of <see cref="T:MagicMvvm.Forms.Dialogs.ActionSheetButton"/> that display as "cancel button"
            </summary>
            <param name="text">Button text</param>
            <param name="action">Action to execute when button pressed</param>
            <returns>An instance of <see cref="T:MagicMvvm.Forms.Dialogs.ActionSheetButton"/></returns>
        </member>
        <member name="M:MagicMvvm.Forms.Dialogs.ActionSheetButton.CreateCancelButton``1(System.String,System.Action{``0},``0)">
            <summary>
            Create a new instance of <see cref="T:MagicMvvm.Forms.Dialogs.ActionSheetButton"/> that display as "cancel button"
            </summary>
            <param name="text">Button text</param>
            <param name="action">Action to execute when button pressed</param>
            <param name="parameter">Parameter to pass the Action when the button is pressed</param>
            <returns>An instance of <see cref="T:MagicMvvm.Forms.Dialogs.ActionSheetButton"/></returns>
        </member>
        <member name="M:MagicMvvm.Forms.Dialogs.ActionSheetButton.CreateDestroyButton(System.String)">
            <summary>
            Create a new instance of <see cref="T:MagicMvvm.Forms.Dialogs.ActionSheetButton"/> that display as "destroy button"
            </summary>
            <param name="text">Button text</param>
            <returns>An instance of <see cref="T:MagicMvvm.Forms.Dialogs.ActionSheetButton"/></returns>
        </member>
        <member name="M:MagicMvvm.Forms.Dialogs.ActionSheetButton.CreateDestroyButton(System.String,System.Action)">
            <summary>
            Create a new instance of <see cref="T:MagicMvvm.Forms.Dialogs.ActionSheetButton"/> that display as "destroy button"
            </summary>
            <param name="text">Button text</param>
            <param name="action">Action to execute when button pressed</param>
            <returns>An instance of <see cref="T:MagicMvvm.Forms.Dialogs.ActionSheetButton"/></returns>
        </member>
        <member name="M:MagicMvvm.Forms.Dialogs.ActionSheetButton.CreateDestroyButton``1(System.String,System.Action{``0},``0)">
            <summary>
            Create a new instance of <see cref="T:MagicMvvm.Forms.Dialogs.ActionSheetButton"/> that display as "destroy button"
            </summary>
            <param name="text">Button text</param>
            <param name="action">Action to execute when button pressed</param>
            <param name="parameter">Parameter to pass the action when the button is pressed</param>
            <returns>An instance of <see cref="T:MagicMvvm.Forms.Dialogs.ActionSheetButton"/></returns>
        </member>
        <member name="M:MagicMvvm.Forms.Dialogs.ActionSheetButton.CreateButton(System.String,System.Action)">
            <summary>
            Create a new instance of <see cref="T:MagicMvvm.Forms.Dialogs.ActionSheetButton"/> that display as "other button"
            </summary>
            <param name="text">Button text</param>
            <param name="action">Action to execute when button pressed</param>
            <returns>An instance of <see cref="T:MagicMvvm.Forms.Dialogs.ActionSheetButton"/></returns>
        </member>
        <member name="M:MagicMvvm.Forms.Dialogs.ActionSheetButton.CreateButton``1(System.String,System.Action{``0},``0)">
            <summary>
            Create a new instance of <see cref="T:MagicMvvm.Forms.Dialogs.ActionSheetButton"/> that display as "other button"
            </summary>
            <param name="text">Button text</param>
            <param name="action">Action to execute when button pressed</param>
            <param name="parameter">Parameter to pass the action when the button is pressed</param>
            <returns>An instance of <see cref="T:MagicMvvm.Forms.Dialogs.ActionSheetButton"/></returns>
        </member>
        <member name="T:MagicMvvm.Forms.Dialogs.ActionSheetButtonBase">
            <summary>
            ActionSheetButton Base class
            </summary>
        </member>
        <member name="P:MagicMvvm.Forms.Dialogs.ActionSheetButtonBase._isCancel">
            <summary>
            Gets a value indicating whether this <see cref="T:MagicMvvm.Forms.Dialogs.IActionSheetButton"/>
            is cancel.
            </summary>
            <value><c>true</c> if is cancel; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MagicMvvm.Forms.Dialogs.ActionSheetButtonBase._isDestroy">
            <summary>
            Gets a value indicating whether this <see cref="T:MagicMvvm.Forms.Dialogs.IActionSheetButton"/>
            is destroy.
            </summary>
            <value><c>true</c> if is destroy; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MagicMvvm.Forms.Dialogs.ActionSheetButtonBase._text">
            <summary>
            The backing text for <see cref="T:MagicMvvm.Forms.Dialogs.IActionSheetButton"/>
            </summary>
            <value>The text.</value>
        </member>
        <member name="P:MagicMvvm.Forms.Dialogs.ActionSheetButtonBase.IsCancel">
            <summary>
            The button will be used as a Cancel Button
            </summary>
            <value><c>true</c> if is cancel; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MagicMvvm.Forms.Dialogs.ActionSheetButtonBase.IsDestroy">
            <summary>
            The button will be used as a Destroy Button
            </summary>
            <value><c>true</c> if is destroy; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:MagicMvvm.Forms.Dialogs.ActionSheetButtonBase.Text">
            <summary>
            Executes the action to take when the button is pressed
            </summary>
            <value>The text.</value>
        </member>
        <member name="M:MagicMvvm.Forms.Dialogs.ActionSheetButtonBase.OnButtonPressed">
            <summary>
            Executes the action.
            </summary>
        </member>
        <member name="T:MagicMvvm.Forms.Dialogs.ActionSheetButton`1">
            <summary>
            Provides a Generic Implementation for IActionSheetButton
            </summary>
        </member>
        <member name="P:MagicMvvm.Forms.Dialogs.ActionSheetButton`1.Action">
            <summary>
            Generic Action to perform
            </summary>
            <value>The action.</value>
        </member>
        <member name="P:MagicMvvm.Forms.Dialogs.ActionSheetButton`1.Parameter">
            <summary>
            Typed Parameter
            </summary>
            <value>The parameter.</value>
        </member>
        <member name="M:MagicMvvm.Forms.Dialogs.ActionSheetButton`1.OnButtonPressed">
            <summary>
            Executes the action to take when the button is pressed
            </summary>
        </member>
        <member name="T:MagicMvvm.Forms.Dialogs.IActionSheetButton">
            <summary>
            Convenient contract to enable executing commands directly when using <see cref="M:MagicMvvm.Forms.Dialogs.IPopupDialog.DisplayActionSheetAsync(System.String,MagicMvvm.Forms.Dialogs.IActionSheetButton[])"/>
            </summary>
        </member>
        <member name="P:MagicMvvm.Forms.Dialogs.IActionSheetButton.IsDestroy">
            <summary>
            The button will be used as destroy
            </summary>
        </member>
        <member name="P:MagicMvvm.Forms.Dialogs.IActionSheetButton.IsCancel">
            <summary>
            The button will be used as cancel
            </summary>
        </member>
        <member name="P:MagicMvvm.Forms.Dialogs.IActionSheetButton.Text">
            <summary>
            Text to display in the action sheet
            </summary>
        </member>
        <member name="M:MagicMvvm.Forms.Dialogs.IActionSheetButton.PressButton">
            <summary>
            Presses the button.
            </summary>
        </member>
        <member name="T:MagicMvvm.Forms.Dialogs.IPopupDialog">
            <summary>
            A service which provides access to the DisplayAlert and DisplayActionSheet off of the Xamarin.Forms.Page class.
            </summary>
        </member>
        <member name="M:MagicMvvm.Forms.Dialogs.IPopupDialog.CanShowDialog">
            <summary>
            Determines if the dialog can be shown.
            </summary>
            <returns>True if you can show the dialog; False if the dialog cannot be shown</returns>
        </member>
        <member name="M:MagicMvvm.Forms.Dialogs.IPopupDialog.DisplayAlertAsync(System.String,System.String,System.String,System.String)">
            <summary>
            Presents an alert dialog to the application user with an accept and a cancel button.
            </summary>
            <para>
            The <paramref name="message"/> can be empty.
            </para>
            <param name="title">Title to display.</param>
            <param name="message">Message to display.</param>
            <param name="acceptButton">Text for the accept button.</param>
            <param name="cancelButton">Text for the cancel button.</param>
            <returns><c>true</c> if non-destructive button pressed; otherwise <c>false</c>/></returns>
        </member>
        <member name="M:MagicMvvm.Forms.Dialogs.IPopupDialog.DisplayAlertAsync(System.String,System.String,System.String,System.String,Xamarin.Forms.FlowDirection)">
            <summary>
            Presents an alert dialog to the application user with an accept and a cancel button.
            </summary>
            <para>
            The <paramref name="message"/> can be empty.
            </para>
            <param name="title">Title to display.</param>
            <param name="message">Message to display.</param>
            <param name="acceptButton">Text for the accept button.</param>
            <param name="cancelButton">Text for the cancel button.</param>
            <param name="flowDirection">The Text flow direction.</param>
            <returns><c>true</c> if non-destructive button pressed; otherwise <c>false</c>/></returns>
        </member>
        <member name="M:MagicMvvm.Forms.Dialogs.IPopupDialog.DisplayAlertAsync(System.String,System.String,System.String)">
            <summary>
            Presents an alert dialog to the application user with a single cancel button.
            </summary>
            <para>
            The <paramref name="message"/> can be empty.
            </para>
            <param name="title">Title to display.</param>
            <param name="message">Message to display.</param>
            <param name="cancelButton">Text for the cancel button.</param>
            <returns></returns>
        </member>
        <member name="M:MagicMvvm.Forms.Dialogs.IPopupDialog.DisplayAlertAsync(System.String,System.String,System.String,Xamarin.Forms.FlowDirection)">
            <summary>
            Presents an alert dialog to the application user with a single cancel button.
            </summary>
            <para>
            The <paramref name="message"/> can be empty.
            </para>
            <param name="title">Title to display.</param>
            <param name="message">Message to display.</param>
            <param name="cancelButton">Text for the cancel button.</param>
            <param name="flowDirection">The Text flow direction.</param>
            <returns></returns>
        </member>
        <member name="M:MagicMvvm.Forms.Dialogs.IPopupDialog.DisplayActionSheetAsync(System.String,System.String,System.String,System.String[])">
            <summary>
            Displays a native platform action sheet, allowing the application user to choose from several buttons.
            </summary>
            <param name="title">Title to display in view.</param>
            <param name="cancelButton">Text for the cancel button.</param>
            <param name="destroyButton">Text for the ok button.</param>
            <param name="otherButtons">Text for other buttons.</param>
            <returns>Text for the pressed button</returns>
        </member>
        <member name="M:MagicMvvm.Forms.Dialogs.IPopupDialog.DisplayActionSheetAsync(System.String,System.String,System.String,Xamarin.Forms.FlowDirection,System.String[])">
            <summary>
            Displays a native platform action sheet, allowing the application user to choose from several buttons.
            </summary>
            <param name="title">Title to display in view.</param>
            <param name="cancelButton">Text for the cancel button.</param>
            <param name="destroyButton">Text for the ok button.</param>
            <param name="flowDirection">The Text flow direction.</param>
            <param name="otherButtons">Text for other buttons.</param>
            <returns>Text for the pressed button</returns>
        </member>
        <member name="M:MagicMvvm.Forms.Dialogs.IPopupDialog.DisplayActionSheetAsync(System.String,MagicMvvm.Forms.Dialogs.IActionSheetButton[])">
            <summary>
            Displays a native platform action sheet, allowing the application user to choose from several buttons.
            </summary>
            <para>
            The text displayed in the action sheet will be the value for <see cref="T:System.Net.Mime.MediaTypeNames.Text"/> and when pressed
            the callback action will be executed.
            </para>
            <param name="title">Text to display in action sheet</param>
            <param name="buttons">Buttons displayed in action sheet</param>
            <returns></returns>
        </member>
        <member name="M:MagicMvvm.Forms.Dialogs.IPopupDialog.DisplayActionSheetAsync(System.String,Xamarin.Forms.FlowDirection,MagicMvvm.Forms.Dialogs.IActionSheetButton[])">
            <summary>
            Displays a native platform action sheet, allowing the application user to choose from several buttons.
            </summary>
            <para>
            The text displayed in the action sheet will be the value for <see cref="T:System.Net.Mime.MediaTypeNames.Text"/> and when pressed
            the callback action will be executed.
            </para>
            <param name="title">Text to display in action sheet</param>
            <param name="flowDirection">The Text flow direction.</param>
            <param name="buttons">Buttons displayed in action sheet</param>
            <returns></returns>
        </member>
        <member name="M:MagicMvvm.Forms.Dialogs.IPopupDialog.DisplayPromptAsync(System.String,System.String,System.String,System.String,System.String,System.Int32,MagicMvvm.Forms.AppModel.KeyboardType,System.String)">
            <summary>
            Displays a native platform prompt, allowing the application user to enter a string.
            </summary>
            <param name="title">Title to display</param>
            <param name="message">Message to display</param>
            <param name="accept">Text for the accept button</param>
            <param name="cancel">Text for the cancel button</param>
            <param name="placeholder">Placeholder text to display in the prompt</param>
            <param name="maxLength">Maximum length of the user response</param>
            <param name="keyboardType">Keyboard type to use for the user response</param>
            <param name="initialValue">Pre-defined response that will be displayed, and which can be edited</param>
            <returns><c>string</c> entered by the user. <c>null</c> if cancel is pressed</returns>
        </member>
        <member name="T:MagicMvvm.Forms.Dialogs.PopupDialog">
            <summary>
            Implementation of the <see cref="T:MagicMvvm.Forms.Dialogs.IPopupDialog"/>
            </summary>
        </member>
        <member name="F:MagicMvvm.Forms.Dialogs.PopupDialog._applicationProvider">
            <summary>
            Gets the <see cref="T:MagicMvvm.Forms.Common.IApplicationProvider"/>.
            </summary>
        </member>
        <member name="F:MagicMvvm.Forms.Dialogs.PopupDialog._keyboardMapper">
            <summary>
            Gets the <see cref="T:MagicMvvm.Forms.AppModel.IKeyboardMapper"/>.
            </summary>
        </member>
        <member name="M:MagicMvvm.Forms.Dialogs.PopupDialog.#ctor">
            <summary>
            Creates a new <see cref="T:MagicMvvm.Forms.Dialogs.IPopupDialog"/>
            </summary>
        </member>
        <member name="M:MagicMvvm.Forms.Dialogs.PopupDialog.DisplayAlertAsync(System.String,System.String,System.String,System.String)">
            <summary>
            Presents an alert dialog to the application user with an accept and a cancel button.
            </summary>
            <para>
            The <paramref name="message"/> can be empty.
            </para>
            <param name="title">Title to display.</param>
            <param name="message">Message to display.</param>
            <param name="acceptButton">Text for the accept button.</param>
            <param name="cancelButton">Text for the cancel button.</param>
            <returns><c>true</c> if non-destructive button pressed; otherwise <c>false</c>/></returns>
        </member>
        <member name="M:MagicMvvm.Forms.Dialogs.PopupDialog.DisplayAlertAsync(System.String,System.String,System.String,System.String,Xamarin.Forms.FlowDirection)">
            <summary>
            Presents an alert dialog to the application user with an accept and a cancel button.
            </summary>
            <para>
            The <paramref name="message"/> can be empty.
            </para>
            <param name="title">Title to display.</param>
            <param name="message">Message to display.</param>
            <param name="acceptButton">Text for the accept button.</param>
            <param name="cancelButton">Text for the cancel button.</param>
            <param name="flowDirection">The Text flow direction.</param>
            <returns><c>true</c> if non-destructive button pressed; otherwise <c>false</c>/></returns>
        </member>
        <member name="M:MagicMvvm.Forms.Dialogs.PopupDialog.DisplayAlertAsync(System.String,System.String,System.String)">
            <summary>
            Presents an alert dialog to the application user with a single cancel button.
            </summary>
            <para>
            The <paramref name="message"/> can be empty.
            </para>
            <param name="title">Title to display.</param>
            <param name="message">Message to display.</param>
            <param name="cancelButton">Text for the cancel button.</param>
            <returns></returns>
        </member>
        <member name="M:MagicMvvm.Forms.Dialogs.PopupDialog.DisplayAlertAsync(System.String,System.String,System.String,Xamarin.Forms.FlowDirection)">
            <summary>
            Presents an alert dialog to the application user with a single cancel button.
            </summary>
            <para>
            The <paramref name="message"/> can be empty.
            </para>
            <param name="title">Title to display.</param>
            <param name="message">Message to display.</param>
            <param name="cancelButton">Text for the cancel button.</param>
            <param name="flowDirection">The Text flow direction.</param>
            <returns></returns>
        </member>
        <member name="M:MagicMvvm.Forms.Dialogs.PopupDialog.DisplayActionSheetAsync(System.String,System.String,System.String,System.String[])">
            <summary>
            Displays a native platform action sheet, allowing the application user to choose from several buttons.
            </summary>
            <param name="title">Title to display in view.</param>
            <param name="cancelButton">Text for the cancel button.</param>
            <param name="destroyButton">Text for the ok button.</param>
            <param name="otherButtons">Text for other buttons.</param>
            <returns>Text for the pressed button</returns>
        </member>
        <member name="M:MagicMvvm.Forms.Dialogs.PopupDialog.DisplayActionSheetAsync(System.String,System.String,System.String,Xamarin.Forms.FlowDirection,System.String[])">
            <summary>
            Displays a native platform action sheet, allowing the application user to choose from several buttons.
            </summary>
            <param name="title">Title to display in view.</param>
            <param name="cancelButton">Text for the cancel button.</param>
            <param name="destroyButton">Text for the ok button.</param>
            <param name="flowDirection">The Text flow direction.</param>
            <param name="otherButtons">Text for other buttons.</param>
            <returns>Text for the pressed button</returns>
        </member>
        <member name="M:MagicMvvm.Forms.Dialogs.PopupDialog.DisplayActionSheetAsync(System.String,MagicMvvm.Forms.Dialogs.IActionSheetButton[])">
            <summary>
            Displays a native platform action sheet, allowing the application user to choose from several buttons.
            </summary>
            <para>
            The text displayed in the action sheet will be the value for <see cref="T:System.Net.Mime.MediaTypeNames.Text"/> and when pressed
            the <see cref="T:System.Windows.Input.ICommand"/> or <see cref="T:System.Action"/> will be executed.
            </para>
            <param name="title">Text to display in action sheet</param>
            <param name="buttons">Buttons displayed in action sheet</param>
            <returns></returns>
        </member>
        <member name="M:MagicMvvm.Forms.Dialogs.PopupDialog.DisplayActionSheetAsync(System.String,Xamarin.Forms.FlowDirection,MagicMvvm.Forms.Dialogs.IActionSheetButton[])">
            <summary>
            Displays a native platform action sheet, allowing the application user to choose from several buttons.
            </summary>
            <para>
            The text displayed in the action sheet will be the value for <see cref="T:System.Net.Mime.MediaTypeNames.Text"/> and when pressed
            the callback action will be executed.
            </para>
            <param name="title">Text to display in action sheet</param>
            <param name="flowDirection">The Text flow direction.</param>
            <param name="buttons">Buttons displayed in action sheet</param>
            <returns></returns>
        </member>
        <member name="M:MagicMvvm.Forms.Dialogs.PopupDialog.DisplayPromptAsync(System.String,System.String,System.String,System.String,System.String,System.Int32,MagicMvvm.Forms.AppModel.KeyboardType,System.String)">
            <summary>
            Displays a native platform prompt, allowing the application user to enter a string.
            </summary>
            <param name="title">Title to display</param>
            <param name="message">Message to display</param>
            <param name="accept">Text for the accept button</param>
            <param name="cancel">Text for the cancel button</param>
            <param name="placeholder">Placeholder text to display in the prompt</param>
            <param name="maxLength">Maximum length of the user response</param>
            <param name="keyboardType">Keyboard type to use for the user response</param>
            <param name="initialValue">Pre-defined response that will be displayed, and which can be edited</param>
            <returns><c>string</c> entered by the user. <c>null</c> if cancel is pressed</returns>
        </member>
        <member name="M:MagicMvvm.Forms.Dialogs.PopupDialog.CanShowDialog">
            <summary>
            Determines if the dialog can be shown.
            </summary>
            <returns>True if you can show the dialog; False if the dialog cannot be shown</returns>
        </member>
        <member name="M:MagicMvvm.Forms.Dialogs.DialogManagerExtensions.ShowDialog(MagicMvvm.Forms.Dialogs.IDialogManager,System.String)">
            <summary>
            Displays a dialog.
            </summary>
            <param name="dialogManager">Instance of <see cref="T:MagicMvvm.Forms.Dialogs.IDialogManager"/></param>
            <param name="name">The unique name of the dialog to display.</param>
        </member>
        <member name="M:MagicMvvm.Forms.Dialogs.DialogManagerExtensions.ShowDialog(MagicMvvm.Forms.Dialogs.IDialogManager,System.String,MagicMvvm.Common.IParameters)">
            <summary>
            Displays a dialog.
            </summary>
            <param name="dialogManager">Instance of <see cref="T:MagicMvvm.Forms.Dialogs.IDialogManager"/></param>
            <param name="name">The unique name of the dialog to display.</param>
            <param name="parameters">Parameters that the dialog can use for custom functionality.</param>
            <example>
            This example shows how to display a dialog with two parameters.
            <code>
            var parameters = new DialogParameters
            {
                { "title", "Connection Lost!" },
                { "message", "We seem to have lost network connectivity" }
            };
            _dialogManager.ShowDialog("DemoDialog", parameters);
            </code>
            </example>
        </member>
        <member name="M:MagicMvvm.Forms.Dialogs.DialogManagerExtensions.ShowDialog(MagicMvvm.Forms.Dialogs.IDialogManager,System.String,System.Action{MagicMvvm.Forms.Dialogs.IDialogResult})">
            <summary>
            Displays a dialog.
            </summary>
            <param name="dialogManager">Instance of <see cref="T:MagicMvvm.Forms.Dialogs.IDialogManager"/></param>
            <param name="name">The unique name of the dialog to display.</param>
            <param name="callback">The action to be invoked upon successful or failed completion of displaying the dialog.</param>
        </member>
        <member name="M:MagicMvvm.Forms.Dialogs.DialogManagerExtensions.RegisterDialog``1(MagicMvvm.Forms.Dialogs.IDialogManager)">
            <summary>
            Registers the dialog.
            </summary>
            <remarks>
            The name of dialog type <typeparamref name="T"/> will be used a unique name to display dialog
            </remarks>
            <param name="dialogManager">Instance of <see cref="T:MagicMvvm.Forms.Dialogs.IDialogManager"/></param>
            <typeparam name="T">View of dialog which is inherited from View</typeparam>
            <returns>The <see cref="T:MagicMvvm.Forms.Dialogs.IDialogManager"/>, for registering several dialogs easily.</returns>
        </member>
        <member name="T:MagicMvvm.Forms.Navigation.NavigationManagerExtensions">
            <summary>
            Extension methods for the <see cref="T:MagicMvvm.Forms.Navigation.INavigationManager"/>
            </summary>
        </member>
        <member name="M:MagicMvvm.Forms.Navigation.NavigationManagerExtensions.RegisterPage``1(MagicMvvm.Forms.Navigation.INavigationManager)">
            <summary>
            Register page for the navigation.
            </summary>
            <param name="navigationManager">Instance of <see cref="T:MagicMvvm.Forms.Navigation.INavigationManager"/>.</param>
            <typeparam name="TView">Type of the view</typeparam>
            <returns>The <see cref="T:MagicMvvm.Forms.Navigation.INavigationManager"/>, for adding several views easily</returns>
        </member>
        <member name="M:MagicMvvm.Forms.Navigation.NavigationManagerExtensions.NavigateToAsync(MagicMvvm.Forms.Navigation.INavigationManager,System.String)">
            <summary>
            Navigates to the specified page.
            </summary>
            <param name="navigationManager">Instance of <see cref="T:MagicMvvm.Forms.Navigation.INavigationManager"/>.</param>
            <param name="pageName">The name of the page that registered for navigation manager.</param>
            <returns>The <see cref="T:MagicMvvm.Forms.Navigation.INavigationResult"/>.</returns>
            <exception cref="T:System.InvalidOperationException">
                Throws exception if <paramref name="pageName"/> is not registered in navigation manager.
            </exception>
        </member>
        <member name="M:MagicMvvm.Forms.Navigation.NavigationManagerExtensions.NavigateToAsync(MagicMvvm.Forms.Navigation.INavigationManager,System.String,MagicMvvm.Common.IParameters)">
            <summary>
            Navigates to the specified page.
            </summary>
            <param name="navigationManager">Instance of <see cref="T:MagicMvvm.Forms.Navigation.INavigationManager"/>.</param>
            <param name="pageName">The name of the page that registered for navigation manager.</param>
            <param name="navigationParameters">Navigation parameters to pass arguments between views.</param>
            <returns>The <see cref="T:MagicMvvm.Forms.Navigation.INavigationResult"/>.</returns>
            <exception cref="T:System.InvalidOperationException">
                Throws exception if <paramref name="pageName"/> is not registered in navigation manager.
            </exception>
        </member>
        <member name="M:MagicMvvm.Forms.Navigation.NavigationManagerExtensions.NavigateToAsync(MagicMvvm.Forms.Navigation.INavigationManager,System.String,System.Action)">
            <summary>
            Navigates to the specified page.
            </summary>
            <param name="navigationManager">Instance of <see cref="T:MagicMvvm.Forms.Navigation.INavigationManager"/>.</param>
            <param name="pageName">The name of the page that registered for navigation manager.</param>
            <param name="navigationCallback">The navigation callback that will be executed after the navigation is completed.</param>
            <returns>The <see cref="T:MagicMvvm.Forms.Navigation.INavigationResult"/>.</returns>
            <exception cref="T:System.InvalidOperationException">
                Throws exception if <paramref name="pageName"/> is not registered in navigation manager.
            </exception>
        </member>
        <member name="M:MagicMvvm.Forms.Navigation.NavigationManagerExtensions.GoBackAsync(MagicMvvm.Forms.Navigation.INavigationManager)">
            <summary>
            Performs backward navigation.
            </summary>
            <param name="navigationManager">Instance of <see cref="T:MagicMvvm.Forms.Navigation.INavigationManager"/>.</param>
            <returns>The <see cref="T:MagicMvvm.Forms.Navigation.INavigationResult"/>.</returns>
        </member>
        <member name="M:MagicMvvm.Forms.Navigation.NavigationManagerExtensions.GoBackAsync(MagicMvvm.Forms.Navigation.INavigationManager,System.Action)">
            <summary>
            Performs backward navigation.
            </summary>
            <param name="navigationManager">Instance of <see cref="T:MagicMvvm.Forms.Navigation.INavigationManager"/>.</param>
            <param name="navigationCallback">The navigation callback that will be executed after the navigation is completed.</param>
            <returns>The <see cref="T:MagicMvvm.Forms.Navigation.INavigationResult"/>.</returns>
        </member>
        <member name="M:MagicMvvm.Forms.Navigation.NavigationManagerExtensions.GoBackAsync(MagicMvvm.Forms.Navigation.INavigationManager,MagicMvvm.Common.IParameters)">
            <summary>
            Performs backward navigation.
            </summary>
            <param name="navigationManager">Instance of <see cref="T:MagicMvvm.Forms.Navigation.INavigationManager"/>.</param>
            <param name="navigationParameters">Navigation parameters to pass arguments between views.</param>
            <returns>The <see cref="T:MagicMvvm.Forms.Navigation.INavigationResult"/>.</returns>
        </member>
        <member name="T:MagicMvvm.Forms.Navigation.INavigationManager">
            <summary>
            Navigation manager for handling navigations
            </summary>
            <remarks>
            Register type as a singleton if you are using IoC container.
            </remarks>
        </member>
        <member name="M:MagicMvvm.Forms.Navigation.INavigationManager.RegisterPage``1(System.String)">
            <summary>
            Registers page for the navigation.
            </summary>
            <param name="pageName">The unique page name</param>
            <returns>Instance of <see cref="T:MagicMvvm.Forms.Navigation.INavigationManager"/>, for easily adding several pages</returns>
            <typeparam name="T">Type of the page</typeparam>
            <exception cref="T:System.ArgumentNullException">
                Throws exception if <paramref name="pageName"/> is null or empty
            </exception>
            <exception cref="T:System.InvalidOperationException">
                Throws exception if page with name <paramref name="pageName"/> is already registered.
            </exception>
        </member>
        <member name="M:MagicMvvm.Forms.Navigation.INavigationManager.NavigateToAsync(System.String,System.Action,MagicMvvm.Common.IParameters)">
            <summary>
            Navigates to the specified page.
            </summary>
            <param name="pageName">The name of the page that registered for navigation manager.</param>
            <param name="navigationCallback">The navigation callback that will be executed after the navigation is completed.</param>
            <param name="parameters">Navigation parameters to pass arguments between views.</param>
            <returns>The <see cref="T:MagicMvvm.Forms.Navigation.INavigationResult"/>.</returns>
            <exception cref="T:System.InvalidOperationException">
                Throws exception if <paramref name="pageName"/> was not registered in navigation manager
            </exception>
        </member>
        <member name="M:MagicMvvm.Forms.Navigation.INavigationManager.GoBackAsync(System.Action,MagicMvvm.Common.IParameters)">
            <summary>
            Performs backward navigation.
            </summary>
            <param name="navigationCallback">The navigation callback that will be executed after the navigation is completed.</param>
            <param name="parameters">Navigation parameters to pass arguments between views.</param>
            <returns>The <see cref="T:MagicMvvm.Forms.Navigation.INavigationResult"/>.</returns>
        </member>
        <member name="T:MagicMvvm.Forms.Navigation.INavigationResult">
            <summary>
            Describes navigation result.
            </summary>
        </member>
        <member name="T:MagicMvvm.Forms.Navigation.IShellNavigationManager">
            <summary>
            Navigation manager for handling navigations between pages in shell application.
            </summary>
            <remarks>
            Register type as a singleton if you are using IoC container.
            </remarks>
        </member>
        <member name="M:MagicMvvm.Forms.Navigation.IShellNavigationManager.RegisterShell``1(``0)">
            <summary>
            Registers shell.
            </summary>
            <param name="instance">Instance of the shell</param>
            <typeparam name="T">Type of the shell</typeparam>
            <exception cref="T:System.ArgumentNullException">
                Throws exception if <paramref name="instance"/> is null.
            </exception>
            <returns>Instance of <see cref="T:MagicMvvm.Forms.Navigation.INavigationManager"/>, for easily adding several shells.</returns>
        </member>
        <member name="T:MagicMvvm.Forms.Navigation.NavigationManager">
            <summary>
            Implements <see cref="T:MagicMvvm.Forms.Navigation.INavigationManager"/> to handle navigation between pages.
            </summary>
            <remarks>
            Register type as a singleton if you are using IoC container.
            </remarks>
        </member>
        <member name="T:MagicMvvm.Forms.Navigation.ShellNavigationManager">
            <summary>
            Implements <see cref="T:MagicMvvm.Forms.Navigation.IShellNavigationManager"/> to handle navigation between pages in the shell.
            </summary>
            <remarks>
            Register type as a singleton if you are using IoC container.
            </remarks>
        </member>
        <member name="T:MagicMvvm.Forms.ViewModelBase">
            <summary>
            Base ViewModel
            </summary>
        </member>
        <member name="T:MagicMvvm.Navigation.INavigationAware">
            <summary>
            Provides a way for objects involved in navigation to be notified of navigation activities.
            </summary>
        </member>
        <member name="M:MagicMvvm.Navigation.INavigationAware.OnNavigatedTo(MagicMvvm.Common.IParameters)">
            <summary>
            Called when the implementer has been navigated to.
            </summary>
            <param name="parameters">The navigation parameters.</param>
        </member>
        <member name="M:MagicMvvm.Navigation.INavigationAware.OnNavigatedFrom(MagicMvvm.Common.IParameters)">
            <summary>
            Called when the implementer is being navigated away from.
            </summary>
            <param name="parameters">The navigation parameters.</param>
        </member>
    </members>
</doc>
