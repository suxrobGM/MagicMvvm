<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MagicMvvm.Blazor</name>
    </assembly>
    <members>
        <member name="M:MagicMvvm.Blazor.ServiceCollectionExtensions.AddMvvmBlazor(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Adds MVVM support.
            </summary>
            <param name="services">Instance of <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>.</param>
            <returns>The <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/></returns>
        </member>
        <member name="T:MagicMvvm.Blazor.LayoutViewBase`1">
            <summary>
            Base view for the layout components.
            </summary>
            <typeparam name="T">Type of the view model.</typeparam>
        </member>
        <member name="P:MagicMvvm.Blazor.LayoutViewBase`1.Model">
            <summary>
            Binding data context.
            </summary>
        </member>
        <member name="P:MagicMvvm.Blazor.LayoutViewBase`1.ServiceProvider">
            <summary>
            Injectable service provider.
            </summary>
        </member>
        <member name="T:MagicMvvm.Blazor.ViewBase`1">
            <summary>
            Base class for razor components.
            </summary>
            <typeparam name="T">Type of the view model.</typeparam>
        </member>
        <member name="P:MagicMvvm.Blazor.ViewBase`1.Model">
            <summary>
            Binding data context.
            </summary>
        </member>
        <member name="P:MagicMvvm.Blazor.ViewBase`1.ServiceProvider">
            <summary>
            Injectable service provider.
            </summary>
        </member>
        <member name="T:MagicMvvm.Blazor.ViewModelBase">
            <summary>
            Base ViewModel
            </summary>
        </member>
        <member name="M:MagicMvvm.Blazor.ViewModelBase.StateHasChanged">
            <summary>
                Notifies the component that its state has changed. When applicable, this will
                cause the component to be re-rendered.
            </summary>
        </member>
        <member name="M:MagicMvvm.Blazor.ViewModelBase.OnInitialized">
            <summary>
                Method invoked when the component is ready to start, having received its
                initial parameters from its parent in the render tree.
            </summary>
        </member>
        <member name="M:MagicMvvm.Blazor.ViewModelBase.OnInitializedAsync">
            <summary>
                Method invoked when the component is ready to start, having received its
                initial parameters from its parent in the render tree.
                Override this method if you will perform an asynchronous operation and
                want the component to refresh when that operation is completed.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> representing any asynchronous operation.</returns>
        </member>
        <member name="M:MagicMvvm.Blazor.ViewModelBase.OnParametersSet">
            <summary>
                Method invoked when the component has received parameters from its parent in
                the render tree, and the incoming values have been assigned to properties.
            </summary>
        </member>
        <member name="M:MagicMvvm.Blazor.ViewModelBase.OnParametersSetAsync">
            <summary>
                Method invoked when the component has received parameters from its parent in
                the render tree, and the incoming values have been assigned to properties.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> representing any asynchronous operation.</returns>
        </member>
        <member name="M:MagicMvvm.Blazor.ViewModelBase.ShouldRender">
            <summary>
                Returns a flag to indicate whether the component should render.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MagicMvvm.Blazor.ViewModelBase.OnAfterRender(System.Boolean)">
            <summary>
                Method invoked after each time the component has been rendered.
            </summary>
            <param name="firstRender">
                Set to <c>true</c> if this is the first time
                <see cref="M:Microsoft.AspNetCore.Components.ComponentBase.OnAfterRender(System.Boolean)" /> has been invoked
                on this component instance; otherwise <c>false</c>.
            </param>
            <remarks>
                The <see cref="M:Microsoft.AspNetCore.Components.ComponentBase.OnAfterRender(System.Boolean)" /> and
                <see cref="M:Microsoft.AspNetCore.Components.ComponentBase.OnAfterRenderAsync(System.Boolean)" /> lifecycle methods
                are useful for performing interop, or interacting with values received from <c>@ref</c>.
                Use the <paramref name="firstRender" /> parameter to ensure that initialization work is only performed
                once.
            </remarks>
        </member>
        <member name="M:MagicMvvm.Blazor.ViewModelBase.OnAfterRenderAsync(System.Boolean)">
            <summary>
                Method invoked after each time the component has been rendered. Note that the component does
                not automatically re-render after the completion of any returned <see cref="T:System.Threading.Tasks.Task" />,
                because
                that would cause an infinite render loop.
            </summary>
            <param name="firstRender">
                Set to <c>true</c> if this is the first time
                <see cref="M:Microsoft.AspNetCore.Components.ComponentBase.OnAfterRender(System.Boolean)" /> has been invoked
                on this component instance; otherwise <c>false</c>.
            </param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> representing any asynchronous operation.</returns>
            <remarks>
                The <see cref="M:Microsoft.AspNetCore.Components.ComponentBase.OnAfterRender(System.Boolean)" /> and
                <see cref="M:Microsoft.AspNetCore.Components.ComponentBase.OnAfterRenderAsync(System.Boolean)" /> lifecycle methods
                are useful for performing interop, or interacting with values received from <c>@ref</c>.
                Use the <paramref name="firstRender" /> parameter to ensure that initialization work is only performed
                once.
            </remarks>
        </member>
        <member name="M:MagicMvvm.Blazor.ViewModelBase.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)">
            <summary>
                Sets parameters supplied by the component's parent in the render tree.
            </summary>
            <param name="parameters">The parameters.</param>
            <returns>
                A <see cref="T:System.Threading.Tasks.Task" /> that completes when the component has finished updating and
                rendering itself.
            </returns>
            <remarks>
                <para>
                    The
                    <see
                        cref="M:Microsoft.AspNetCore.Components.ComponentBase.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)" />
                    method should be passed the entire set of parameter values each
                    time
                    <see
                        cref="M:Microsoft.AspNetCore.Components.ComponentBase.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)" />
                    is called. It not required that the caller supply a parameter
                    value for all parameters that are logically understood by the component.
                </para>
                <para>
                    The default implementation of
                    <see
                        cref="M:Microsoft.AspNetCore.Components.ComponentBase.SetParametersAsync(Microsoft.AspNetCore.Components.ParameterView)" />
                    will set the value of each property
                    decorated with <see cref="T:Microsoft.AspNetCore.Components.ParameterAttribute" /> or
                    <see cref="T:Microsoft.AspNetCore.Components.CascadingParameterAttribute" /> that has
                    a corresponding value in the <see cref="T:Microsoft.AspNetCore.Components.ParameterView" />. Parameters that do
                    not have a corresponding value
                    will be unchanged.
                </para>
            </remarks>
        </member>
    </members>
</doc>
